<script define:vars={{ testTrackingId }}>
  // Esperar a que el DOM esté completamente cargado
  document.addEventListener('DOMContentLoaded', () => {
    const results = document.getElementById('results')
    const loadPixelBtn = document.getElementById('loadPixel')
    const loadStatsBtn = document.getElementById('loadStats')
    const clearLogsBtn = document.getElementById('clearLogs')
    
    // Verificar que los elementos existan
    if (!results || !loadPixelBtn || !loadStatsBtn || !clearLogsBtn) {
      console.error('❌ No se encontraron todos los elementos del DOM')
      return
    }
    
    function addLog(message, type = 'info') {
      const timestamp = new Date().toLocaleTimeString()
      const colors = {
        info: 'text-blue-600',
        success: 'text-green-600',
        error: 'text-red-600',
        warning: 'text-yellow-600'
      }
      
      const logEntry = document.createElement('div')
      logEntry.className = colors[type] || colors.info
      logEntry.innerHTML = `[${timestamp}] ${message}`
      
      results.appendChild(logEntry)
      results.scrollTop = results.scrollHeight
    }
    
    // Botón: Cargar pixel
    loadPixelBtn.addEventListener('click', async () => {
      addLog('🔄 Cargando pixel de tracking...', 'info')
      
      try {
        const response = await fetch(`/track/${testTrackingId}.png`)
        
        if (response.ok) {
          addLog('✅ Pixel cargado correctamente', 'success')
          addLog(`📊 Status: ${response.status}, Content-Type: ${response.headers.get('content-type')}`, 'info')
        } else {
          addLog(`❌ Error al cargar pixel: ${response.status}`, 'error')
        }
      } catch (error) {
        addLog(`❌ Error de conexión: ${error.message}`, 'error')
      }
    })
    
    // Botón: Cargar estadísticas - CORREGIDO con await fetch
    loadStatsBtn.addEventListener('click', async () => {
      addLog('📈 Cargando estadísticas...', 'info')
      
      try {
        // ✅ CORRECCIÓN PRINCIPAL: await fetch agregado
        const response = await fetch(`/stats/tracking?id=${testTrackingId}`)
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`)
        }
        
        const data = await response.json()
        
        if (data.success) {
          addLog(`📊 Total de aperturas: ${data.data.totalOpens}`, 'success')
          
          if (data.data.opens && data.data.opens.length > 0) {
            addLog(`🕒 Primera apertura: ${data.data.opens[0].timestamp}`, 'success')
            
            data.data.opens.forEach((open, index) => {
              const userAgent = open.user_agent ? 
                open.user_agent.substring(0, 50) + '...' : 
                'Unknown'
              addLog(`  ${index + 1}. ${new Date(open.timestamp).toLocaleString()} - ${userAgent}`, 'info')
            })
          } else {
            addLog('ℹ️ No hay aperturas registradas aún', 'warning')
          }
          
          if (data.data.dbTest) {
            addLog(`🔧 DB Test: ${JSON.stringify(data.data.dbTest)}`, 'info')
          }
        } else {
          addLog(`❌ Error en stats: ${data.error}`, 'error')
        }
      } catch (error) {
        addLog(`❌ Error al cargar stats: ${error.message}`, 'error')
        console.error('Error completo:', error)
      }
    })
    
    // Botón: Limpiar
    clearLogsBtn.addEventListener('click', () => {
      results.innerHTML = '<p class="text-gray-500">Logs limpiados. Prueba el sistema...</p>'
    })
    
    // Cargar automáticamente al inicio
    addLog('🚀 Sistema de tracking inicializado', 'success')
    addLog(`🔑 Tracking ID: ${testTrackingId}`, 'info')
    addLog('ℹ️ Usa los botones de arriba para probar el sistema', 'info')
  })
</script>